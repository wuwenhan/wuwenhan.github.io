<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>伍文瀚的博客</title>
    <description>伍文瀚，PHP工程师，从事web相关的开发工作。开源爱好者，GitHub:https://github.com/wuwenhan。</description>
    <link>http://wuwenhan.com/</link>
    <atom:link href="http://wuwenhan.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 22 Jul 2016 22:30:23 +0800</pubDate>
    <lastBuildDate>Fri, 22 Jul 2016 22:30:23 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>git回滚远程版本</title>
        <description>&lt;p&gt;使用git管理项目开发的过程中经常会碰到这种情况：某次提交已经push到了远程仓库，可是突然意识到“天哪，我怎么做了这么蠢的事情”。那么问题来了，怎么将远程代码库回滚呢？&lt;/p&gt;

&lt;p&gt;在网上看到大部分人给出的解决方案是先将本地回滚，然后删除远程分支，之后再将本地的分支push到远程仓库，这其实是一种很危险的方案，毕竟直接删除远程分支太狠了，不推荐这样做。。。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;1、删除最后一次提交&lt;/h3&gt;

&lt;p&gt;这种情况是最简单的了，只需要以下两步就可以了&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git revert HEAD
git push origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;注意，revert和reset的区别:&lt;/p&gt;

&lt;p&gt;revert是放弃指定提交的修改，但是会生成一次新的提交，需要填写提交注释，以前的历史记录都在，而reset是指将HEAD指针指到指定提交，历史记录中不会出现放弃的提交记录。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git revert HEAD
git log
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;历史记录中还有第三次提交的记录，并且多了一次的提交，但是仓库内容已经回到了第二次提交之后的状态&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git reset --hard HEAD^
git log
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;历史记录中已经没有之前revert生成的提交记录了，现在应该明白了吧。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;2、删除历史某次提交&lt;/h3&gt;

&lt;p&gt;这种情况需要先用git log命令在历史记录中查找到想要删除的某次提交的commit id&lt;/p&gt;

&lt;p&gt;然后执行以下命令（”commit id”替换为想要删除的提交的”commit id”，需要注意最后的^号，意思是commit id的前一次提交）&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git rebase -i &lt;span class=&quot;s2&quot;&gt;&quot;commit id&quot;&lt;/span&gt;^
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;执行该条命令之后会打开一个编辑框，列出了包含该次提交在内之后的所有提交&lt;/p&gt;

&lt;p&gt;然后在编辑框中删除你想要删除的提交所在行，然后保存退出就好啦，如果有冲突的需要解决冲突。接下来，执行以下命令，将本地仓库提交到远程库就完成了：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git push origin master -f
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-2&quot;&gt;3、修改历史某次提交&lt;/h3&gt;

&lt;p&gt;这种情况的解决方法类似于第二种情况，只需要在第二条打开编辑框之后，将你想要修改的提交所在行的pick替换成edit然后保存退出，这个时候rebase会停在你要修改的提交，然后做你需要的修改，修改完毕之后，执行以下命令：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add .
git commit --amend
git rebase --continue
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;如果你在之前的编辑框修改了n行，也就是说要对n次提交做修改，则需要重复执行以上步骤n次。&lt;/p&gt;

&lt;p&gt;需要注意的是，在执行rebase命令对指定提交修改或删除之后，该次提交之后的所有提交的”commit id”都会改变。&lt;/p&gt;
</description>
        <pubDate>Sun, 10 Apr 2016 05:22:46 +0800</pubDate>
        <link>http://wuwenhan.com/articles/2016/04/git%E5%9B%9E%E6%BB%9A%E8%BF%9C%E7%A8%8B%E7%89%88%E6%9C%AC.html</link>
        <guid isPermaLink="true">http://wuwenhan.com/articles/2016/04/git%E5%9B%9E%E6%BB%9A%E8%BF%9C%E7%A8%8B%E7%89%88%E6%9C%AC.html</guid>
        
        
        <category>wuwenhan</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>最牛的编程套路</title>
        <description>&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;1.写一份自己的简历，把自己所有的相关技能列出来，然后把那些在100年后还用得到的标出来。给每个技能打分，满分为10分。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2.罗列出你所景仰的程序员。尽量包括那些与你一起工作的人，因为你会在工作中从他们身上获取一些技能。记录下他们身上的1~2个闪光点，也就* 是你希望自己有所提高的方面。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;3.查看维基百科上的“计算机科学” 栏目，找到“计算机领域先驱者” 这个分类（网址：http://zh.wikipedia.org/wiki/Category:计算机领域先驱者），从这个列表中挑选一个人，阅读他的事迹，并且在阅读时打开任何你感兴趣的链接。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;4.花20分钟通读别人的代码，读出色的代码和读糟糕的代码都是有益的，两者都要读，轮流切换。如果你无法感受出它们之间的区别，可以求助于* 一位你尊敬的程序员，让他给你展示一下什么事出色的代码，什么事糟糕的代码。把你读过的代码也给别人看看，问问他们的看法。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;5.罗列出你最喜欢的10个编程工具——那些你觉得你用得最多、缺了它们不行的工具，从中随机挑选一个，花一个小时去阅读它的文档，在这一个小* 时里，努力去学习这个工具的某个你不曾意识到的新功能，或者发现某种新的使用方法。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;6.想一想，除了编程之外你最擅长什么事情？再想一想，你是通过怎样的锻炼才变得如此熟练和专业的？这对于你的编程工作又有什么启发呢？（* 怎么把这些经验应用到编程方面？）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;7.拿出一叠简历，并和一组面试官在同一个房间里待上一个小时。确保每份简历都至少被3个面试官看过，并且要给出1~3分的评分。针对那些不同* 面试官评判大相径庭的简历展开讨论。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;8.参与一个电话面试。事后写下你的反馈，抛出你的观点，然后与主持电话面试的人聊一聊，看看你们是否达成了一致的结论。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;9.进行一次技术面试，并且被面试的人应该是某个你不太了解的领域里的专家，让他假定听众在该领域里一无所知，因此请他从最基础的的讲起，* 努力去理解他所说的，必要时问一些问题。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;10.有机会参与别人的技术面试。期间，你只是认真的听，认真的学。在应聘者努力解决技术问题的同时，你也要在自己脑子里尝试解决这些问题。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;11找到一个能和你交换实际问题的人，每隔一周，相互交流编程问题，花10~15分钟来尝试解决这些问题，再用10~15分钟进行讨论（无论能否解决 ）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;12.当听到任何一时间你也无法解决的面试问题时，赶紧回到你的座位上，把这个问题用电子邮件发给自己，以留作日后的提醒，在那一周里找出点时间，用自己最喜欢的编程语言来解决它。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 06 Mar 2016 05:22:46 +0800</pubDate>
        <link>http://wuwenhan.com/articles/2016/03/%E6%9C%80%E7%89%9B%E7%9A%84%E7%BC%96%E7%A8%8B%E5%A5%97%E8%B7%AF.html</link>
        <guid isPermaLink="true">http://wuwenhan.com/articles/2016/03/%E6%9C%80%E7%89%9B%E7%9A%84%E7%BC%96%E7%A8%8B%E5%A5%97%E8%B7%AF.html</guid>
        
        
        <category>wuwenhan</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>让听见炮声的人指挥战斗</title>
        <description>&lt;p&gt;企业管理层的目标，就是建立流程化的组织，企业家威望很高，大家都很崇敬他的时候，这个时候是企业最危险的时候，也是最没有希望的时候，因为这就是透支个人能力，在弥补组织的缺陷，企业最有生命的时候，企业家在企业没有太大作用的时候.&lt;/p&gt;

&lt;p&gt;管理，必须按照流程来确定职责，权利，责任，使组织的决策更多的不是依赖企业家个人的决策，让整个企业管理变得简单、高效、低成本，管理的方法论看似无生命其实是有生命的，它的生命力体现在什么地方呢，就是一代一代分类者的生命终结了，但是你的管理体系会越来越成熟，每一代的管理者都会给他的体系添砖加瓦，并且代代相传，声声不息.这样好比巴萨罗那的足球队，你只要在我的体系内，我换教练，他只会不断完善这个体系，他走了，另一个人也能带领球队走向冠军。&lt;/p&gt;

&lt;p&gt;你越来越了解怎么驾驭变化的规律，你的组织能力就塑造出来了，这是我们华人企业家最缺少的，管理要不断的从定性走向定量，从语文走向数学，要学会经营数据和实时数据的管理，不是要超越，而是要补课，以不变应对未知的变化，我们无法准测预知未来，但我们可以通过归纳找到方向，要不断激活队伍,并且使自己处在合理的组织机构，和优良的竞技状态，不断调整组织机构，以预防未来。&lt;/p&gt;

&lt;p&gt;科学的组织机构，业务流程，管理体制，个人岗位职责，配套规范手册，怎么完成人岗匹配。&lt;/p&gt;

&lt;p&gt;流程体系 以用户为中心，强调流程驱动，&lt;/p&gt;

&lt;p&gt;以美国特种部队打塔利班的例子建立流程驱动，军队环境是最不确定的，只有靠平常的训练做好准备，美国打仗与以前不同，以前需要一层一层申请，请示指挥，而现在三个人一个小组，一个是战斗专家，一个情报专家，一个火力专家&lt;/p&gt;

&lt;p&gt;战斗专家战术技能最强，主要职责保护这个小组，情报专家是发现目标的战斗集群，然后定位，火力专家岗位职责，看到这样的集群用什么火力去攻击，消灭它，这三个人事一个小组，三个岗位的人每个都懂一点对方领域的知识，好处交流起来很方便，万一有人受伤了，另一个人可以补上来&lt;/p&gt;

&lt;p&gt;美军快速变化响应非常快，机制变了，有很高的授权，5000万美元以内可以直接呼唤炮火，250万一个战斧式导弹，也就是可以呼唤20个战斧导弹。&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Aug 2015 05:22:46 +0800</pubDate>
        <link>http://wuwenhan.com/articles/2015/08/%E5%9B%A2%E9%98%9F%E7%BB%8F%E9%AA%8C.html</link>
        <guid isPermaLink="true">http://wuwenhan.com/articles/2015/08/%E5%9B%A2%E9%98%9F%E7%BB%8F%E9%AA%8C.html</guid>
        
        
        <category>wuwenhan</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>当情怀已经烂大街，我们还可以谈些什么</title>
        <description>&lt;p&gt;几年前，情怀还是个清新脱俗如空谷幽兰每一个音节都透着一股独立气息的词，任何事情挂上情怀二字，瞬间就弱化了其追逐利益的一面，逼格提高了N个level。&lt;/p&gt;

&lt;p&gt;但是，由于众所周知的某手机的神来之笔，情怀二字瞬间变成了眼高手低的代言词。&lt;/p&gt;

&lt;p&gt;所以，作为一惯敏于行而衲与演的码农群体，我们今天不谈情怀，我们谈谈别的，比如说理想。&lt;/p&gt;

&lt;p&gt;理想不是文艺青年的专用词，理想也不是靠45度仰望天空就能实现的白日梦。但是每个人都有理想，无论接地气的理想诸如赚大钱还是曲高和睦的理想比如说周游世界浪漫得如同古罗马的唱诗人，是理想，就值得尊重。&lt;/p&gt;

&lt;p&gt;我不知道每一个程序猿的理想是什么，但是我知道，你们通往理想的天梯必然是由一行行代码砌成的。&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Jul 2015 05:22:46 +0800</pubDate>
        <link>http://wuwenhan.com/articles/2015/07/%E6%83%85%E6%80%80.html</link>
        <guid isPermaLink="true">http://wuwenhan.com/articles/2015/07/%E6%83%85%E6%80%80.html</guid>
        
        
        <category>wuwenhan</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>写p2p项目中感受</title>
        <description>&lt;p&gt;写这个项目后对yii和php的设计模式更有深层的感受，如果你是用面向对象的思想去考虑问题你写出来的项目就是面向对象的程序，如果你用面向过程的想法去写程序那么你写出来的程序就是面向过程的程序，写程序并不在于程序是怎么样的，而在于你自己的设计理解。对程序中项目分工也有了深一层理解，以前我做都是按模块分，现在知道了还可以按业务分。也深深感觉到了程序分工中的问题。&lt;/p&gt;

&lt;p&gt;项目如同战争，好比你分工说你和谁打辽沈、你和谁打淮海、你和谁打平津，在这之后就开始布置更细的分工，谁要在几点几分攻打下那，和某某部队会合。这之间如果安排不当就会出问题，可能谁过了几天还没攻打下来，过了战斗时机，全军覆没。但也不至于，可能谁会去救援，再来个迂回，但是整体的策划就需要改变。&lt;/p&gt;

&lt;p&gt;记得上个p2p项目写支付接口用了两天，可这次支付接口竟然写了两个星期。&lt;/p&gt;

&lt;p&gt;在这个项目开始，几乎身边的人都说不可能完成，某某说要等他熟悉了才开始写，某某说不知道怎么开始写，某某说这个项目太大了，肯定按时做不完。项目开始后先告诉他们怎么开始写这个项目，并写了个例子应该怎么写，然后进行分工，问题就来了，明明可以百度到问题还要问，想要他们问的是选择题，可每次问我的都是问答题。带他们打了淮海，还得自己打平津，最后api估计也得留给自己写。做这个项目发现自己费力不讨好，带会了还惹埋怨。我这是图啥呢，一开始自己写不就好了。&lt;/p&gt;

&lt;p&gt;主要是自己不会带团队，如何带团队一条心呢，现在的不是团队……&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Jul 2015 05:22:46 +0800</pubDate>
        <link>http://wuwenhan.com/articles/2015/07/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95.html</link>
        <guid isPermaLink="true">http://wuwenhan.com/articles/2015/07/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95.html</guid>
        
        
        <category>wuwenhan</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>单例模式</title>
        <description>&lt;h2 id=&quot;singleton&quot;&gt;2、单例模式&lt;/h2&gt;

&lt;h5 id=&quot;what-is-singleton&quot;&gt;2.1、概念&lt;/h5&gt;
&lt;p&gt;保证一个类仅有一个实例，并且提供一个访问它的全局访问点。单例又分懒汉、饿汉（PHP不支持）、登记式。&lt;/p&gt;

&lt;h5 id=&quot;feature-singleton&quot;&gt;2.2、特点&lt;/h5&gt;

&lt;p&gt;1、一个类只有一个实例&lt;/p&gt;

&lt;p&gt;2、它必须自行创建这个实例&lt;/p&gt;

&lt;p&gt;3、必须自行向整个系统提供这个实例&lt;/p&gt;

&lt;h5 id=&quot;when-use-singleton&quot;&gt;2.3、适合场景&lt;/h5&gt;

&lt;p&gt;1、当类只能有一个实例而且客户可以从一个众所周知的访问点访问它时&lt;/p&gt;

&lt;p&gt;2、当这个唯一实例应该是通过子类化可扩展的。并且用户应该无需更改代码就能使用一个扩展的实例时。&lt;/p&gt;

&lt;h5 id=&quot;issue-singleton&quot;&gt;2.4、问题&lt;/h5&gt;

&lt;p&gt;假设现在有一个保存应用信息的类Preference,我们可以用它来保存如用户信息的字符串、文件路径等。这些信息在你每次调用时候都可能有所不同。类似一个“公告板”，它是可以被系统中其他无关对象设置和获取信息的中心。&lt;/p&gt;

&lt;p&gt;但是问题来了，如果在对象中直接传递Preference,让原来并不使用Preference对象的类强制接受Preference对象，会产生耦合。&lt;/p&gt;

&lt;p&gt;我们还需要保证系统中所有对象都使用的同一个Preference对象。&lt;/p&gt;

&lt;h5 id=&quot;solution-singleton&quot;&gt;2.5、解决&lt;/h5&gt;

&lt;p&gt;我们可以从强制控制对象的实例化开始。&lt;/p&gt;

&lt;pre&gt;

&amp;lt;?php 

class Preference
{
    private $props = array();

    private static $instance;
    
    //防止外界实例化对象
    private function __construct()
    {

    }
    //防止外界clone实例
    private function __clone()
    {

    }
    
    public static function getInstance()
    {
        if (empty(self::$instance)) {
            self::$instance = new Preference();
        }

        return self::$instance;
    }

    public function setProperty($key,$val)
    {
        $this-&amp;gt;props[$key] = $val;
    }

    public function getProperty($key)
    {
        return $this-&amp;gt;props[$key];
    }
}

$pref = Preference::getInstance();
$pref-&amp;gt;setProperty(&quot;name&quot;,&quot;xujiajun&quot;);
unset($pref);
$pref2 = Preference::getInstance();
echo $pref2-&amp;gt;getProperty(&quot;name&quot;);//输出xujiajun  key为name的属性值并没有丢失。
&lt;/pre&gt;

&lt;h5 id=&quot;result-singleton&quot;&gt;2.6、效果总结&lt;/h5&gt;

&lt;p&gt;因为单例在系统任何地方都可以被访问，所以它们可能导致很难调试的依赖关系。如果改变一个单例，那么所有使用该单例的类可能都会受到影响。虽然我们在每次声明一个特定类型的参数的方法时，也都创建了依赖关系。问题是当单例被使用时，依赖便会被隐藏在方法内部，并没有出现在方法的声明中,这使得系统的依赖关系更加难以追踪。&lt;/p&gt;

&lt;p&gt;当然，适当的使用单例可以改进系统的设计。在OOP编程中，单例模式是一种全局变量的改进。你无法用错误类型的数据覆盖一个单例。这种保护尤其不支持命名空间的PHP版本中尤其重要。&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Jul 2015 05:22:46 +0800</pubDate>
        <link>http://wuwenhan.com/articles/2015/07/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html</link>
        <guid isPermaLink="true">http://wuwenhan.com/articles/2015/07/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html</guid>
        
        
        <category>wuwenhan</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>记录</title>
        <description>&lt;p&gt;有一家大排档，老板叫朱哥，糙老爷们儿一个，皮肤黝黑，经常捏着一把蒲扇在烟雾中晃悠。青椒猪肝面是他的招牌，还有各式盖烧饭、山东煎饼、炭烤生蚝、应有尽有。用食物慰藉这个城市的单身贵族们，附近大厦的上班族给朱哥的店起了个很应景的名字：单身食堂。&lt;/p&gt;

&lt;p&gt;朱哥手上有很多故事，多数是食客讲的，他们就着啤酒，大口吃着肉，见朱哥老师，就什么秘密都告诉他。缺爱的男男女女，骂老板的小职员，刚吵过架的小情侣，比一台晚会还生动。&lt;/p&gt;

&lt;p&gt;其中有个叫方岚的女孩儿，在背后大厦的广告公司上班，恋爱史干净，距离上一段爱情已经空窗两年多，分手初期痛得瓷牙咧嘴的，现在已经对前任这个词免疫，人始终要向前看，她在等待最好的爱情。&lt;/p&gt;

&lt;p&gt;陈土木，人如其名，戴着黑框眼镜，平头工科男，永远是一身宽大的素色衬衫和裤子。大学隔壁专业的女汉子喜欢他，暗示的方法千奇百怪，但就抵不过他那木讷脑子，不了了之。所以直到现在，他都没有完整谈一场恋爱，工作又是网站的夜班编辑，过着美国时间，只有电脑咖啡作伴，别说女汉子，连个汉子都没有。&lt;/p&gt;

</description>
        <pubDate>Sun, 28 Jun 2015 05:22:46 +0800</pubDate>
        <link>http://wuwenhan.com/articles/2015/06/%E8%AE%B0%E5%BD%95.html</link>
        <guid isPermaLink="true">http://wuwenhan.com/articles/2015/06/%E8%AE%B0%E5%BD%95.html</guid>
        
        
        <category>wuwenhan</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>2014年工作总结</title>
        <description>&lt;p&gt;2014年7月入职到现在，已经过去大半年了。在这半年来经历的很多，感受也很多。&lt;/p&gt;

&lt;p&gt;回想当初面试的时候心里想公司已经有了一定的规模，各方面做起来应该都比较容易，但是进入公司之后发现事情要困难的多。作为部门经理当时的想法是要先定一些规范，把大家的节奏都统一起来，但是技术上却欠缺了太多，所以又进行了一些简短的培训，慢慢的前端终于可以出一些可用的产品，在后端研发上将git、版本控制并通过框架终于让他们懂得开发上的一些相关步骤。慢慢的大家相互探讨，相互研究，进步的很快。在这个过程中我一直希望可以把更好的一面让大家看到，希望大家在工作中感到快乐。&lt;/p&gt;

&lt;p&gt;这段日子里，我看到了自己的成长，同时也看到了大家的进步。工作中，我也会经常遇到难题，很多技术上的问题，通过不断的学习和沟通，当解决了这些难题时我也会由衷的感受到快乐。半年来，带着周写cms,带着利亚写B2B,指导杨做网站，可能是自己的脾气急一些对向南还是指导的少些。其实我一直希望现在对他们多指导一些，做项目的时候对他们多讲一些，让他们以后可以少走一些弯路。虽然有时候项目紧了会偶尔加班，但是我认为这是对工作负责的态度。&lt;/p&gt;

&lt;p&gt;做一个合格的技术经理不仅要做好技术方面的工作，也要做好管理工作。这期间，在管理方面我明白了很多，首先要把自己放在公司建设的总体框架中来定位自己，审视自己。时时刻刻以公司利益为先，协助领导管理好公司，在语言表达的能力上，在协调关系的能力上，在组织管理的能力上，在完成工作的标准上表现出色。我会尽力打造一支优秀的技术团队，创造合适工作的环境和氛围，让大家在一个好的状态下发挥出最大的能力。会积极的树立典范，处理好各方面的关系，加强沟通协调，做好工作。&lt;/p&gt;

&lt;p&gt;虽然这段时间里我成长了很多，但还是感觉出了自己很多的不足。主要在于缺乏相关管理的经验、工作方式不够灵活，我并不是一个善于沟通的人，但是这往往是最大的问题，好的事情也可能并没有传达好。在这一方面我是欠缺的。有些错误发生了，即使我再去调整，还是会有痕迹的。所以在以后的工作中，我一定时时刻刻注意修正自己不足的地方，养成良好的工作习惯。&lt;/p&gt;

&lt;p&gt;在接下来的日子里，我会虚心的学习，带领大家一起进步，同时做好管理工作，一同走向一个新的高度。&lt;/p&gt;

&lt;p&gt;我认为一个人价值, 在于你真正产生了多大的贡献, 为公司, 为他人..
如果你真正做出了真正有价值的贡献, 那么你就可以得到于价值相当的肯定. 或多点, 或少点, 或早点, 或晚点。&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Jan 2015 05:22:46 +0800</pubDate>
        <link>http://wuwenhan.com/articles/2015/01/2014%E5%B9%B4%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93.html</link>
        <guid isPermaLink="true">http://wuwenhan.com/articles/2015/01/2014%E5%B9%B4%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93.html</guid>
        
        
        <category>wuwenhan</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>ubuntu添加ftp用户</title>
        <description>&lt;p&gt;groupadd ftptest&lt;/p&gt;

&lt;p&gt;useradd -G ftptest -d /var/www -M user1&lt;/p&gt;

&lt;p&gt;passwd user1&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Jan 2015 23:22:46 +0800</pubDate>
        <link>http://wuwenhan.com/articles/2015/01/ubuntu%E6%B7%BB%E5%8A%A0ftp%E7%94%A8%E6%88%B7.html</link>
        <guid isPermaLink="true">http://wuwenhan.com/articles/2015/01/ubuntu%E6%B7%BB%E5%8A%A0ftp%E7%94%A8%E6%88%B7.html</guid>
        
        
        <category>wuwenhan</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>微信配置本地调试</title>
        <description>&lt;p&gt;##下载注册ngrok&lt;/p&gt;

&lt;p&gt;注册ngrok会得到token&lt;/p&gt;

&lt;p&gt;##切换到下载ngrok目录&lt;/p&gt;

&lt;p&gt;配置本地ip映射到二级域名&lt;/p&gt;

&lt;p&gt;ngrok -authtoken 注册时的token 对应ip和接口
ngrok -subdomain=wwhweixin 192.168.33.10:80&lt;/p&gt;

&lt;p&gt;现在已经可以使用了&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Jan 2015 17:22:46 +0800</pubDate>
        <link>http://wuwenhan.com/articles/2015/01/%E5%BE%AE%E4%BF%A1%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95.html</link>
        <guid isPermaLink="true">http://wuwenhan.com/articles/2015/01/%E5%BE%AE%E4%BF%A1%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95.html</guid>
        
        
        <category>wuwenhan</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
